<?php

    //php7.0 Strict Type
    declare(strict_types=1);
    //ini_set('display_errors', 1);
    //ini_set('display_startup_errors', 1);
    //error_reporting(E_ALL);

	//composer file
	require '../vendor/autoload.php';


	if( !defined( __DIR__ ) ) define( __DIR__, dirname(__FILE__) );
    //autoloader

	//define .ini directory
	define('CONFDIR', __DIR__ . '/');

    include 'Psr4Autoloader.php';
    
    $loader = new \Example\Psr4AutoloaderClass;  

    // register the autoloader
    $loader->register();
	//The below line may need to go in the calling files as this is path relative to the calling files, NOT this include file (whois.inc)
    $loader->addNamespace('cmu', '../code/class/cmu');

	//  Application helper
	(new \cmu\config\site\bin\ApplicationHelper())->init();

     $emptycells = 2;
    //probably remove this method as it should be listed elsewhere
    function makeButton($name, $value, $type, $component)

    {

        $button = new \cmu\html\form\builders\VariableSingleBuilder("Input", array ('name' => $name, 'value'=>$value, 'type'=>$type));

        $button->build($component);

    }

    function arraySubstitute(array $array, $arraykeys)

    {

        foreach ($array as $k => $v) {

            if (is_array($v)) {

                arraySubstitute($v, $arraykeys);

                continue;

            }

            print_r($v);
            echo "<br />";

            $pattern = "/%%((.*)*)%%/";

            if (preg_match($pattern, $v, $matches)) {

                echo "MATCH!!--";

                echo "<br />";
                echo $v;
                //$matches[1] should have the key?
                echo "<br />";

                echo "NEW=";
                echo preg_replace($pattern, $arraykeys[$matches[1]], $v);

                echo "<br />";
                
                echo "key=" . $k;

                echo "<br />";

                print_r($array);

                echo "<br />";

                $new = preg_replace($pattern, $arraykeys[$matches[1]], $v);

                $array[$k] = $new;

            }

        }

        return $array;

    }

    function getKeyValues(array $array)

    {

        $keys = array_keys($array); 

            foreach ($keys as $key) {

                $tddataarray[$key] = $array[$key]['tddata'];

            }

        return $tddataarray;

    }

?>
